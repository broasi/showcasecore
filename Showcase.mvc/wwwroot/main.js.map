{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/_guards/auth.guard.ts","webpack:///./src/app/_services/alertify.service.ts","webpack:///./src/app/_services/auth.service.ts","webpack:///./src/app/_services/category.service.ts","webpack:///./src/app/_services/client.service.ts","webpack:///./src/app/_services/urls.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/autocomplete/autocomplete.component.css","webpack:///./src/app/autocomplete/autocomplete.component.html","webpack:///./src/app/autocomplete/autocomplete.component.ts","webpack:///./src/app/categories/category-add/category-add.component.css","webpack:///./src/app/categories/category-add/category-add.component.html","webpack:///./src/app/categories/category-add/category-add.component.ts","webpack:///./src/app/clients/client-add/client-add.component.css","webpack:///./src/app/clients/client-add/client-add.component.html","webpack:///./src/app/clients/client-add/client-add.component.ts","webpack:///./src/app/clients/client-edit/client-edit.component.css","webpack:///./src/app/clients/client-edit/client-edit.component.html","webpack:///./src/app/clients/client-edit/client-edit.component.ts","webpack:///./src/app/clients/client-home/client-home.component.css","webpack:///./src/app/clients/client-home/client-home.component.html","webpack:///./src/app/clients/client-home/client-home.component.ts","webpack:///./src/app/home-spa/home-spa.component.css","webpack:///./src/app/home-spa/home-spa.component.html","webpack:///./src/app/home-spa/home-spa.component.ts","webpack:///./src/app/nav/nav.component.css","webpack:///./src/app/nav/nav.component.html","webpack:///./src/app/nav/nav.component.ts","webpack:///./src/app/passer/passer.component.css","webpack:///./src/app/passer/passer.component.html","webpack:///./src/app/passer/passer.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/register/routes.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { AlertifyService } from '../_services/alertify.service';\nimport { AuthService } from '../_services/auth.service';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router, private alertify: AlertifyService) {}\n\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.loggedIn()) {\n      return true;\n    }\n\n    this.alertify.error('You need to be logged in to access this area');\n    this.router.navigate(['/home-spa']);\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\ndeclare let alertify: any;\n\n@Injectable()\nexport class AlertifyService {\n\nconstructor() { }\n\nconfirm(message: string, okCallback: () => any) {\n    alertify.confirm(message, function(e) {\n        if (e) {\n            okCallback();\n        } else {\n        }\n    });\n}\n\nsuccess(message: string) {\n    alertify.success(message);\n}\n\nerror(message: string) {\n    alertify.error(message);\n}\n\nwarning(message: string) {\n    alertify.warning(message);\n}\n\nmessage(message: string) {\n    alertify.message(message);\n}\n\n}\n","import { Http, Headers, RequestOptions, Response } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport { Observable } from 'rxjs/Observable';\nimport { tokenNotExpired, JwtHelper } from 'angular2-jwt';\nimport { User } from '../_models/User';\nimport { UrlsService } from '../_services/urls.service';\n\n@Injectable()\nexport class AuthService {\n  baseUrl =  this.urlsService.baseUrlApi + '/api/auth/';\n  userToken: any;\n  decodedToken: any;\n  currentUser: User;\n  jwtHelper: JwtHelper = new JwtHelper();\n\n  constructor(private http: Http, private urlsService: UrlsService) { }\n\n  login(model: any) {\n    return this.http.post(this.baseUrl + 'login', model, this.requestOptions()).map((response: Response) => {\n        const user = response.json();\n        if (user) {\n            localStorage.setItem('token', user.tokenString);\n            localStorage.setItem('user', JSON.stringify(user.user));\n            this.decodedToken = this.jwtHelper.decodeToken(user.tokenString);\n            this.currentUser = user.user;\n            this.userToken = user.tokenString;\n        }\n    }).catch(this.handleError);\n  }\n\n  register(user: User) {\n    return this.http\n    .post(this.baseUrl + 'register', user, this.requestOptions())\n    .catch(this.handleError);\n  }\n\n  loggedIn() {\n      return tokenNotExpired('token');\n  }\n\n  private requestOptions() {\n      const header = new Headers({ 'Content-type': 'application/json'});\n      return new RequestOptions({ headers: header});\n  }\n\n  private handleError(error: any) {\n      const applicationError = error.headers.get('Application-Error');\n      if (applicationError) {\n          return Observable.throw(applicationError);\n      }\n      const serverError = error.json();\n      let modelStateErrors = '';\n      if (serverError) {\n          for (const key in serverError) {\n              if (serverError[key]) {\n                  modelStateErrors += serverError[key] + '\\n';\n              }\n          }\n      }\n      return Observable.throw(\n          modelStateErrors || 'Server error'\n      );\n  }\n\n}\n","import { Http, Headers, RequestOptions, Response } from '@angular/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport { Observable } from 'rxjs/Observable';\nimport { Category } from '../_models/Category';\nimport { UrlsService } from '../_services/urls.service';\nimport { AuthHttp } from 'angular2-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  baseUrl =  this.urlsService.baseUrlApi + '/api/admin/';\n\n  constructor(private http: Http, private urlsService: UrlsService, private authHttp: AuthHttp) {\n  }\n\n  getCategories(): Observable<Category[]> {\n    return this.authHttp.get(this.baseUrl + 'categories', )\n        .map(response => <Category[]>response.json())\n        .catch(this.handleError);\n  }\n\n  register(category: Category) {\n    return this.http\n    .post(this.baseUrl + 'addcategory', category, this.requestOptions())\n    .catch(this.handleError);\n  }\n\n  private requestOptions() {\n    const header = new Headers({ 'Content-type': 'application/json'});\n    return new RequestOptions({ headers: header});\n  }\n\n  private handleError(error: any) {\n    const applicationError = error.headers.get('Application-Error');\n    if (applicationError) {\n        return Observable.throw(applicationError);\n    }\n    const serverError = error.json();\n    let modelStateErrors = '';\n    if (serverError) {\n        for (const key in serverError) {\n            if (serverError[key]) {\n                modelStateErrors += serverError[key] + '\\n';\n            }\n        }\n    }\n    return Observable.throw(\n        modelStateErrors || 'Server error'\n    );\n  }\n}\n\n\n","import { Http, Headers, RequestOptions, Response } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport { Observable } from 'rxjs/Observable';\nimport { Client } from '../_models/Client';\nimport { ClientEdit } from '../_models/ClientEdit';\nimport { UrlsService } from '../_services/urls.service';\nimport { AuthHttp } from 'angular2-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  baseUrl =  this.urlsService.baseUrlApi + '/api/admin/';\n\n  constructor(private http: Http, private urlsService: UrlsService, private authHttp: AuthHttp) { }\n\n  register(client: Client) {\n    return this.authHttp\n    .post(this.baseUrl + 'addclient', client, this.requestOptions())\n    .catch(this.handleError);\n  }\n\n  UpdateClient(client: ClientEdit, client_Id) {\n    return this.authHttp\n    .put(this.baseUrl + 'updateclient/' + client_Id, client, this.requestOptions())\n    .catch(this.handleError);\n  }\n\n  getClient(clientName: string): Observable<Client> {\n    return this.authHttp.get(this.baseUrl + 'getclient/' + clientName.substring(clientName.lastIndexOf('*')+2), )\n        .map(response => <Client>response.json())\n        .catch(this.handleError);\n  }\n\n  listClients(): Observable<Client> {\n    return this.authHttp.get(this.baseUrl + 'listallclients/', )\n        .map(response => <Client>response.json())\n        .catch(this.handleError);\n  }\n\n  deleteClient(id: number) {\n    return this.authHttp.delete(this.baseUrl + 'deleteClient/' + id, {}).catch(this.handleError);\n  }\n\n  private requestOptions() {\n    const header = new Headers({ 'Content-type': 'application/json'});\n    return new RequestOptions({ headers: header});\n  }\n\n  private handleError(error: any) {\n    const applicationError = error.headers.get('Application-Error');\n    if (applicationError) {\n        return Observable.throw(applicationError);\n    }\n    const serverError = error.json();\n    let modelStateErrors = '';\n    if (serverError) {\n        for (const key in serverError) {\n            if (serverError[key]) {\n                modelStateErrors += serverError[key] + '\\n';\n            }\n        }\n    }\n    return Observable.throw(\n        modelStateErrors || 'Server error'\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UrlsService {\n  baseUrl: any;\n  baseUrlApi: any;\n\n  constructor() {\n    this.baseUrl = '../../images';\n    this.baseUrl =  window.location.origin;\n    this.baseUrlApi =  'http://localhost:5000';\n    if (window.location.origin !== 'http://localhost:5000' && window.location.origin !== 'http://localhost:4200') {\n      this.baseUrl =  window.location.origin + '/core';\n      this.baseUrlApi =  window.location.origin + '/core';\n    }\n  }\n\n  basePath() {\n    return this.baseUrl;\n  }\n\n  basePathApi() {\n    return this.baseUrlApi;\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<app-nav></app-nav>\\n<router-outlet></router-outlet>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './_services/auth.service';\nimport { JwtHelper } from 'angular2-jwt';\nimport { User } from './_models/User';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Showcase Magazine';\n  jwtHelper: JwtHelper = new JwtHelper();\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    const token = localStorage.getItem('token');\n    const user: User = JSON.parse(localStorage.getItem('user'));\n    if (token) {\n      this.authService.decodedToken = this.jwtHelper.decodeToken(token);\n    }\n    if (user) {\n      this.authService.currentUser = user;\n    }\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BsDropdownModule, TabsModule, BsDatepickerModule } from 'ngx-bootstrap';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { RouterModule } from '@angular/router';\nimport { appRoutes } from './register/routes';\nimport { NavComponent } from './nav/nav.component';\nimport { HomeSpaComponent } from './home-spa/home-spa.component';\nimport { AuthService } from './_services/auth.service';\nimport { AlertifyService } from './_services/alertify.service';\nimport { UrlsService } from './_services/urls.service';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthGuard } from './_guards/auth.guard';\nimport { RegisterComponent } from './register/register.component';\nimport { ClientHomeComponent } from './clients/client-home/client-home.component';\nimport { ClientAddComponent } from './clients/client-add/client-add.component';\nimport { ClientEditComponent } from './clients/client-edit/client-edit.component';\nimport { AutocompleteComponent } from './autocomplete/autocomplete.component';\nimport { CategoryAddComponent } from './categories/category-add/category-add.component';\nimport { PasserComponent } from './passer/passer.component';\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      NavComponent,\n      HomeSpaComponent,\n      RegisterComponent,\n      ClientAddComponent,\n      ClientHomeComponent,\n      ClientEditComponent,\n      CategoryAddComponent,\n      AutocompleteComponent,\n      PasserComponent\n   ],\n   imports: [\n    RouterModule.forRoot(appRoutes, {useHash : true}),\n    BsDropdownModule.forRoot(),\n    TabsModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    AuthModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    AuthService,\n    AlertifyService,\n    UrlsService,\n    AuthGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Http, RequestOptions } from '@angular/http';\nimport { AuthHttp, AuthConfig } from 'angular2-jwt';\n\nexport function authHttpServiceFactory(http: Http, options: RequestOptions) {\n    return new AuthHttp(new AuthConfig({\n        tokenName: 'token',\n        tokenGetter: (() => localStorage.getItem('token')),\n        globalHeaders: [{ 'Content-Type': 'application/json' }],\n    }), http, options);\n}\n\n@NgModule({\n  providers: [\n    {\n        provide: AuthHttp,\n        useFactory: authHttpServiceFactory,\n        deps: [Http, RequestOptions]\n    }\n  ]\n})\n\nexport class AuthModule { }\n","module.exports = \"a:hover{\\r\\n    background-color:#b0edff;\\r\\n    color:black;\\r\\n    padding:10px;    \\r\\n}\\r\\nul.li.a{\\r\\n    padding:10px;    \\r\\n}\\r\\na {\\r\\n  color:inherit;\\r\\n  text-decoration: none;\\r\\n }\\r\\nul\\r\\n{\\r\\n    list-style-type: none;\\r\\n}\"","module.exports = \"\\n<div class=\\\"container\\\" >\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"clients\\\">Clients:</label><br>\\n          <input id=\\\"clients\\\" autocomplete=\\\"off\\\" type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=query (keyup)=filter() (keyup.enter)=searchClient()>\\n        </div>        \\n    </div>    \\n  </div>\\n\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div class=\\\"form-group\\\">\\n                <div class=\\\"suggestions\\\" *ngIf=\\\"filteredList.length > 0\\\">\\n                    <ul *ngFor=\\\"let item of filteredList\\\">\\n                        <li>                        \\n                            <a style=\\\"padding:10px\\\" (click)=\\\"select(item);searchClient()\\\">{{item}}</a>\\n                        </li>\\n                    </ul>\\n                </div>\\n        </div>\\n      </div>\\n  </div>\\n</div>  \\t\\n\"","import { Component, OnInit, ElementRef, Output, Input, EventEmitter, SimpleChanges } from '@angular/core';\nimport { ClientService } from '../_services/client.service';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { ActivatedRoute, Router } from '../../../node_modules/@angular/router';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.css']\n})\n\nexport class AutocompleteComponent implements OnInit {    \n    @Output() autoClientName = new EventEmitter<string>();\n    private alertify: AlertifyService;\n    public clients: any = [];\n    public query = '';\n    public filteredList = [];\n    public elementRef;\n\n    constructor(private router: Router, route: ActivatedRoute, myElement: ElementRef, private clientService: ClientService) {\n        route.params.subscribe(val => {\n            this.listen();\n            this.elementRef = myElement;      \n        });                            \n    }\n\n    ngOnInit() {      \n    }\n\n    listen() {\n        this.query = '';\n        this.clients = [];\n        this.getClients();        \n    }\n\n    filter() {      \n      if (this.query !== \"\"){\n          this.filteredList = this.clients.filter(function(el){\n              return el.toLowerCase().indexOf(this.query.toLowerCase()) > -1;\n          }.bind(this));\n      }else{\n          this.filteredList = [];\n      }\n    }\n \n    select(item){\n        this.query = item;\n        this.filteredList = [];\n    }\n\n    getClients() {\n        this.clientService.listClients().subscribe(data => {        \n            for (let j = 0; j <= data.length - 1; j++) {\n                this.clients.push(data[j]['name']+' * '+data[j]['client_Id']);\n             }\n           }, error => {\n             this.alertify.error(error);\n           });       \n     }\n\n     searchClient() {\n        this.autoClientName.emit(this.query)        \n     }     \n     \n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-6\\\">\\n          <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\"> \\n              <br><br>\\n              <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Description').errors && registerForm.get('Description').touched}\\\">\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Category\\\" formControlName=\\\"Description\\\">\\n                <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('Description').hasError('required') && registerForm.get('Description').touched\\\">\\n                  Category is required\\n                </span>\\n              </div>          \\n  \\n              <div class=\\\"form-group text-center\\\">\\n                  <button class=\\\"btn btn-success\\\" [disabled]=\\\"!registerForm.valid\\\" type=\\\"submit\\\">Save</button>\\n                  <button class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n              </div>\\n            \\n            </form>\\n      </div>\\n    </div>\\n  </div>\\n  \\n  \"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { CategoryService } from '../../_services/category.service';\nimport { AlertifyService } from '../../_services/alertify.service';\nimport { Category } from '../../_models/Category';\n\n@Component({\n  selector: 'app-category-add',\n  templateUrl: './category-add.component.html',\n  styleUrls: ['./category-add.component.css']\n})\nexport class CategoryAddComponent implements OnInit {\n  registerForm: FormGroup;\n  category: Category;\n\n  constructor(\n    private alertify: AlertifyService,\n    private fb: FormBuilder,\n    private categoryService: CategoryService\n  ) { }\n\n  ngOnInit() {\n    this.createRegisterForm();\n  }\n\n  createRegisterForm() {\n    this.registerForm = this.fb.group({\n      Description: ['', Validators.required]      \n    });\n  }\n\n  register() {\n    if (this.registerForm.valid) {\n      this.category = Object.assign({}, this.registerForm.value);\n      this.categoryService.register(this.category).subscribe(() => {\n          this.alertify.success('Category registration successful');\n          this.registerForm.reset();\n       }, error => {\n        this.alertify.error('There is some error');\n       }\n      );\n    }\n  }\n\n  cancel() {\n    this.registerForm.reset();\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-6\\\">\\n        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\"> \\n            <!-- <h2 class=\\\"text-center text-primary\\\">Add Client</h2>\\n            <hr> -->\\n            <br><br>\\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Name').errors && registerForm.get('Name').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\" placeholder=\\\"Name\\\" formControlName=\\\"Name\\\">\\n              <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('Name').hasError('required') && registerForm.get('Name').touched\\\">\\n                Client Name is required\\n              </span>\\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Addr1').errors && registerForm.get('Addr1').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Addr1\\\" formControlName=\\\"Addr1\\\">    \\n            </div>                        \\n            \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('City').errors && registerForm.get('City').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"City\\\" formControlName=\\\"City\\\">    \\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('State').errors && registerForm.get('State').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"State\\\" formControlName=\\\"State\\\">    \\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Zip').errors && registerForm.get('Zip').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Zip\\\" formControlName=\\\"Zip\\\">    \\n              <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('Zip').hasError('maxlength') && registerForm.get('Zip').touched\\\">\\n                Zip cannot exceed 5 characters\\n              </span>\\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Tel').errors && registerForm.get('Tel').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Tel\\\" formControlName=\\\"Tel\\\">    \\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Email').errors && registerForm.get('Email').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" formControlName=\\\"Email\\\">    \\n            </div>\\n            \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Url').errors && registerForm.get('Url').touched}\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Url\\\" formControlName=\\\"Url\\\">    \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"\\\" class=\\\"control-label\\\" style=\\\"margin-right:10px\\\">Use Freetxt:</label>\\n                <label class=\\\"radio-inline\\\">\\n                  <input type=\\\"radio\\\" value=\\\"Yes\\\" formControlName=\\\"Addr2\\\">Yes\\n                </label>\\n                <label class=\\\"radio-inline\\\">\\n                  <input type=\\\"radio\\\" value=\\\"No\\\" formControlName=\\\"Addr2\\\">No\\n                </label>\\n            </div>\\n              \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Freetxt').errors && registerForm.get('Freetxt').touched}\\\">\\n              <textarea rows=\\\"10\\\" cols=\\\"60\\\" class=\\\"form-control\\\" placeholder=\\\"Freetxt\\\" formControlName=\\\"Freetxt\\\"></textarea>\\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Blurb').errors && registerForm.get('Blurb').touched}\\\">\\n                <textarea  rows=\\\"10\\\" cols=\\\"60\\\" class=\\\"form-control\\\" placeholder=\\\"Blurb\\\" formControlName=\\\"Blurb\\\"></textarea>\\n            </div>\\n          \\n            <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('Category_Id').errors && registerForm.get('Category_Id').touched}\\\">\\n                <label for=\\\"Category_Id\\\" class=\\\"control-label\\\" style=\\\"margin-right:10px\\\">Categories:</label>\\n                <select class=\\\"form-control\\\" multiple style=\\\"height:400px\\\" placeholder=\\\"Category_Id\\\" formControlName=\\\"Category_Id\\\">\\n                    <option *ngFor=\\\"let category of categories\\\" [value]='category.category_Id'>{{category.description}}</option>\\n                </select>                \\n            </div>\\n\\n            <div class=\\\"form-group text-center\\\">\\n                <button class=\\\"btn btn-success\\\" [disabled]=\\\"!registerForm.valid\\\" type=\\\"submit\\\">Save</button>\\n                <button class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n            </div>\\n          \\n          </form>\\n    </div>\\n  </div>\\n</div>\\n\\n\"","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { AlertifyService } from '../../_services/alertify.service';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { Client } from '../../_models/Client';\nimport { User } from '../../_models/User';\nimport { Category } from '../../_models/Category';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ClientService } from '../../_services/client.service';\nimport { CategoryService } from '../../_services/category.service';\n\n@Component({\n  selector: 'app-client-add',\n  templateUrl: './client-add.component.html',\n  styleUrls: ['./client-add.component.css']\n})\nexport class ClientAddComponent implements OnInit {\n  @Output() cancelRegister = new EventEmitter();\n  client:  Client;\n  user: User;\n  registerForm: FormGroup;\n  // categoryDescription: string[];\n  categories: any;\n  // category_Ids:  number[];\n\n  constructor(\n    private alertify: AlertifyService,\n    private fb: FormBuilder,\n    private router: Router,\n    private clientService: ClientService,\n    private categoryService: CategoryService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n     this.categoryService.getCategories().subscribe(data => {\n       this.categories = data;\n     }, error => {\n       this.alertify.error(error);\n     });\n    this.createRegisterForm();\n    // this.category_Ids = [];\n  }\n\n  createRegisterForm() {\n    this.registerForm = this.fb.group({\n      Name: ['', Validators.required],\n      Addr1: [''],\n      Addr2: ['Yes'],\n      City: [''],\n      State: [''],\n      Zip: ['', Validators.maxLength(15)],\n      Tel: [''],\n      Email: [''],\n      Url: [''],\n      Freetxt: [''],\n      Blurb: [''],\n      Category_Id: ['', Validators.required]\n    });\n  }\n\n  // addCategory() {\n  //   this.category_Ids.push(this.registerForm.controls['Category_IdLookup'].value);\n  //   this.registerForm.controls['Category_Id'].setValue(this.category_Ids);\n  //   this.categoryDescription.push(this.registerForm.controls['Category_IdLookup'].s);\n  // }\n\n  register() {\n    if (this.registerForm.valid) {\n      this.client = Object.assign({}, this.registerForm.value);\n      this.clientService.register(this.client).subscribe(() => {\n        this.alertify.success('Client registration successful');\n        this.registerForm.reset();\n        this.router.navigate(['/clients/' + Math.floor(Math.random() * 20)]);\n        // console.log(this.registerForm.controls['Category_Id'].value);\n      }, error => {\n        this.alertify.error(error);\n      } // , () => {\n      //    this.authService.login(this.user).subscribe(() => {\n      //    this.router.navigate(['/clients']);\n      //   });\n      //  }\n      );\n      }\n  }\n\n  cancel() {\n    this.cancelRegister.emit(false);\n  }\n}\n\n","module.exports = \"\"","module.exports = \"<form name=\\\"registerForm\\\"  #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"update()\\\"> \\n<app-autocomplete #cancelAuto  (autoClientName)=\\\"receiveMessage($event)\\\">Loading...</app-autocomplete>\\n<hr>\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-6\\\">\\n            <!-- <h2 class=\\\"text-center text-primary\\\">Update Client</h2>\\n            <hr> -->\\n            <div style=\\\"display: none;\\\">\\n              <input type=\\\"text\\\" disabled class=\\\"form-control\\\" [(ngModel)]=\\\"model.client_Id\\\"  name=\\\"client_Id\\\" placeholder=\\\"Client Id\\\">              \\n            </div>\\n            <br><br>\\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.name\\\" required name=\\\"Name\\\" placeholder=\\\"Name\\\">              \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.addr1\\\" name=\\\"Addr1\\\" placeholder=\\\"Addr1\\\">              \\n            </div>                        \\n            \\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.city\\\" name=\\\"City\\\" placeholder=\\\"City\\\">              \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">              \\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.state\\\" name=\\\"State\\\" placeholder=\\\"State\\\">              \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.zip\\\" name=\\\"Zip\\\" placeholder=\\\"Zip\\\">              \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.tel\\\" name=\\\"Tel\\\" placeholder=\\\"Tel\\\">              \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.email\\\" name=\\\"Email\\\" placeholder=\\\"Email\\\">              \\n            </div>\\n            \\n            <div class=\\\"form-group\\\">\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.url\\\" name=\\\"Url\\\" placeholder=\\\"Url\\\">              \\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"\\\" class=\\\"control-label\\\" style=\\\"margin-right:10px\\\">Use Freetxt:</label>\\n                <label class=\\\"radio-inline\\\">\\n                  <input type=\\\"radio\\\" value=\\\"Yes\\\" [(ngModel)]=\\\"model.addr2\\\" name=\\\"Addr2\\\">Yes\\n                </label>\\n                <label class=\\\"radio-inline\\\">\\n                  <input type=\\\"radio\\\" value=\\\"No\\\" [(ngModel)]=\\\"model.addr2\\\" name=\\\"Addr2\\\">No\\n                </label>\\n            </div>\\n              \\n            <div class=\\\"form-group\\\">\\n              <textarea rows=\\\"10\\\" cols=\\\"60\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.freetxt\\\" placeholder=\\\"Freetxt\\\" name=\\\"Freetxt\\\"></textarea>\\n            </div>\\n          \\n            <div class=\\\"form-group\\\">\\n                <textarea  rows=\\\"10\\\" cols=\\\"60\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.blurb\\\" placeholder=\\\"Blurb\\\" name=\\\"Blurb\\\"></textarea>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">                 \\n                <b>Saved categories:</b><div style=\\\"color:red\\\" *ngFor=\\\"let selected of ClientCategories\\\">{{selected}}</div>\\n                <label for=\\\"Category_Id\\\" class=\\\"control-label\\\"  style=\\\"margin-right:10px; display: none\\\">Categories: {{ model.clientCategories | json }}  </label>\\n                <select class=\\\"form-control\\\" multiple name=\\\"clientCategories\\\" style=\\\"height:400px\\\" placeholder=\\\"ClientCategories\\\" name=\\\"ClientCategories\\\" [(ngModel)]=\\\"model.clientCategories\\\">\\n                    <option *ngFor=\\\"let category of categoriesTrim\\\" [ngValue]=\\\"category.category_Id\\\">{{category.description}} - ({{category.category_Id}})</option>\\n                </select>                \\n            </div>\\n\\n            <div class=\\\"form-group text-center\\\">\\n                <button class=\\\"btn btn-success\\\" [disabled]=\\\"!registerForm.valid\\\" type=\\\"submit\\\">Save</button>\\n                <button class=\\\"btn btn-success\\\" [disabled]=\\\"!registerForm.valid\\\" type=\\\"button\\\" (click)=\\\"delete()\\\">Delete</button>\\n                <button class=\\\"btn btn-default\\\" type=\\\"button\\\"  (click)=\\\"cancel()\\\">Cancel</button>\\n            </div>\\n    </div>\\n  </div>\\n </div>\\n</form>\\n\"","import { Component, OnInit, Output, EventEmitter, Input, ViewChild } from '@angular/core';\nimport { CategoryService } from '../../_services/category.service';\nimport { AlertifyService } from '../../_services/alertify.service';\nimport { ClientService } from '../../_services/client.service';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AutocompleteComponent } from '../../autocomplete/autocomplete.component';\n\n@Component({\n  selector: 'app-client-edit',\n  templateUrl: './client-edit.component.html',\n  styleUrls: ['./client-edit.component.css']\n})\nexport class ClientEditComponent implements OnInit {\n  @Output() cancelRegister = new EventEmitter();\n  @ViewChild('registerForm') form: any;\n  editClientName : string;\n  categories: any;\n  categoriesTrim: any = [];\n  model: any = {};\n  ClientCategories: string[] = [];\n  CategoriesSelected:  any = [];\n  @ViewChild('cancelAuto') cancelAuto: AutocompleteComponent;\n\n  constructor(private categoryService: CategoryService, private alertify: AlertifyService, private clientService: ClientService) {\n   \n  }\n\n  ngOnInit() {\n  }\n  \n  receiveMessage($event) {\n    this.editClientName = $event\n    this.ClientCategories = [];\n    this.CategoriesSelected = [];\n    this.categoriesTrim = [];\n    this.model = {};\n    this.categoryService.getCategories().subscribe(data => {\n      this.categories = data;\n            this.clientService.getClient(this.editClientName).subscribe(data => {\n              this.model = data;\n                for (let j = 0; j <= this.categories.length - 1; j++) {                  \n                  this.categoriesTrim.push({\"category_Id\" : this.categories[j]['category_Id'], \"description\" : this.categories[j]['description']});\n                  for (let i = 0; i <= this.model.clientCategories.length - 1; i++) {\n                      if (this.model.clientCategories[i]['category_Id'] === this.categories[j]['category_Id']) {\n                        this.ClientCategories.push(this.categories[j]['description']); // display categories in plain text\n                        this.CategoriesSelected.push(this.categories[j]['category_Id']);\n                      }\n                  }\n                }\n                this.model.clientCategories = this.CategoriesSelected;\n            }, error => {\n              this.alertify.error(error);\n            });\n            \n    }, error => {\n      this.alertify.error(error);\n    });\n  }\n\n  update() {    \n       this.CategoriesSelected = [];\n       this.CategoriesSelected = this.model.clientCategories;   // contains the updated selected categories\n       this.model.clientCategories = [];\n       for (let i = 0; i <= this.CategoriesSelected.length  - 1; i++) {\n         this.model.clientCategories.push({'category_Id' : this.CategoriesSelected[i]});\n       }      \n       this.clientService.UpdateClient(this.model,this.model.client_Id).subscribe(() => {        \n       this.alertify.success('Client registration successful');\n       this.cancel();\n        // console.log(this.registerForm.controls['Category_Id'].value);\n      }, error => {\n        console.log(this.model);\n        this.alertify.error(error);\n      }\n      );\n  }\n\n  cancel() {\n    this.cancelAuto.listen();\n    this.form.reset();\n    this.ClientCategories = [];\n  }\n \n  delete() {\n    this.alertify.confirm('Are you sure you want to delete this Client?', () => {\n        this.clientService.deleteClient(this.model.client_Id).subscribe(() => {          \n          this.alertify.success('Client has been deleted');\n          this.cancel();\n        }, error => {\n          this.alertify.error('Failed to delete Client');\n        });\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n<div *ngIf=\\\"loggedIn()\\\" class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-12\\\">\\n            <div class=\\\"tab-panel\\\">\\n                <tabset class=\\\"member-tabset\\\">                    \\n                    <tab heading=\\\"Update Client\\\">\\n                        <app-client-edit>Loading...</app-client-edit>                \\n                    </tab>\\n                    <tab heading=\\\"Add Client \\\">                \\n                         <app-client-add>Loading...</app-client-add>\\n                    </tab>\\n                    <tab heading=\\\"Add Categories\\\">\\n                         <app-category-add>Loading...</app-category-add>\\n                    </tab>                \\n                </tabset>\\n            </div>      \\n        </div>\\n    </div>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../_services/auth.service';\nimport { ActivatedRoute, Router } from '../../../../node_modules/@angular/router';\n\n@Component({\n  selector: 'app-client-home',\n  templateUrl: './client-home.component.html',\n  styleUrls: ['./client-home.component.css']\n})\nexport class ClientHomeComponent implements OnInit {\n  \n  constructor(public authService: AuthService, private route: ActivatedRoute) { \n    // this.route.params.subscribe( params => console.log(params) );\n  }\n\n  ngOnInit() {\n  }\n\n  loggedIn() {\n    return this.authService.loggedIn();\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n<div *ngIf=\\\"registerMode\\\" style=\\\"text-align: center\\\">\\n    <h1>\\n      Register Users\\n    </h1>\\n    <p class=\\\"lead\\\">Sign up new users!</p>\\n    <div class=\\\"text-align:center\\\">\\n        <button class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"registerToggle()\\\">Register</button>\\n        <button class=\\\"btn btn-info btn-lg\\\">Learn more</button>\\n    </div>\\n</div>\\n\\n<div *ngIf=\\\"registerMode\\\" class=\\\"container\\\">\\n  <div class=\\\"col-md-4 col-md-offset-4\\\">\\n      <app-register  (cancelRegister)=\\\"cancelRegisterMode($event)\\\"></app-register>\\n  </div>\\n</div>\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home-spa.component.html',\n  styleUrls: ['./home-spa.component.css']\n})\nexport class HomeSpaComponent implements OnInit {\n  registerMode = false;\n  values: any;\n\n  constructor(private http: Http) { }\n\n  ngOnInit() {\n  }\n\n  registerToggle() {\n    this.registerMode = true;\n  }\n\n  cancelRegisterMode(registerMode: boolean) {\n   this.registerMode = registerMode;\n }\n}\n","module.exports = \".dropdown-menu li, .dropdown-toggle {\\r\\n    cursor: pointer;\\r\\n}\"","module.exports = \"<nav class=\\\"navbar navbar-default\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbar\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n      </button>\\n      <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/home']\\\">Showcase Magazine</a>\\n    </div>\\n    <div id=\\\"navbar\\\" class=\\\"navbar-collapse collapse\\\">\\n      <ul class=\\\"nav navbar-nav\\\" *ngIf=\\\"loggedIn()\\\">\\n        <li routerLinkActive=\\\"active\\\"><a [routerLink] = \\\"['/clients']\\\">Clients</a></li>\\n        <li><a [routerLink] = \\\"['/clients/2']\\\">Reload</a></li>\\n        <!-- <li routerLinkActive=\\\"active\\\"><a [routerLink] = \\\"['/categories']\\\">Categories</a></li>\\n        <li routerLinkActive=\\\"active\\\"><a [routerLink] = \\\"['/client-categories']\\\">Client Categories</a></li> -->\\n      </ul>\\n\\n      <form *ngIf=\\\"!loggedIn()\\\" #loginForm=\\\"ngForm\\\" class=\\\"navbar-form navbar-right\\\" (ngSubmit)=login()>\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"text\\\" #username=\\\"ngModel\\\" placeholder=\\\"Username\\\" class=\\\"form-control\\\" required name=\\\"username\\\" [(ngModel)]=\\\"model.username\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"password\\\" #password=\\\"ngModel\\\" placeholder=\\\"Password\\\" class=\\\"form-control\\\" required name=\\\"password\\\" [(ngModel)]=\\\"model.password\\\">\\n        </div>\\n        <button type=\\\"submit\\\" [disabled]=\\\"!loginForm.valid\\\" class=\\\"btn btn-success\\\">Sign in</button>\\n      </form>\\n\\n      <ul *ngIf=\\\"loggedIn()\\\" class=\\\"nav navbar-nav navbar-right\\\">              \\n        <li class=\\\"dropdown\\\" dropdown>\\n          <a (click)=\\\"false\\\" class=\\\"dropdown-toggle\\\" dropdownToggle>\\n            Welcome {{ authService.decodedToken?.unique_name | titlecase}} <span class=\\\"caret\\\"></span></a>\\n          <ul class=\\\"dropdown-menu\\\" *dropdownMenu>\\n            <li><a [routerLink]=\\\"['/member/edit']\\\" routerLinkActive=\\\"router-link-active\\\"  class=\\\"fa fa-user\\\">Edit Profile</a></li>\\n            <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\n            <li><a (click)=\\\"logout()\\\" class=\\\"fa fa-sign-out\\\">Logout</a></li>            \\n          </ul>\\n        </li>\\n      </ul>\\n\\n    </div>\\n  </div>\\n</nav>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { AlertifyService } from '../_services/alertify.service';\nimport {Pipe, PipeTransform} from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\n  model: any = {};\n\n  constructor(public authService: AuthService, private alertify: AlertifyService, private router: Router) { }\n\n  ngOnInit() {}\n\n  login() {\n      this.authService.login(this.model).subscribe(data => {\n        this.alertify.success('logged in successfully');\n      }, error => {\n        this.alertify.error('Failed to login');\n      }, () => {\n        this.router.navigate(['/members']);\n      });\n  }\n\n  logout() {\n    this.authService.userToken = null;\n    this.authService.currentUser = null;\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.alertify.message('logged out');\n    this.router.navigate(['/home']);\n  }\n\n  loggedIn() {\n    return this.authService.loggedIn();\n  }\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  passer works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-passer',\n  templateUrl: './passer.component.html',\n  styleUrls: ['./passer.component.css']\n})\n\nexport class PasserComponent implements OnInit {\n\n  constructor(private router: Router) { \n    this.router.navigate(['/clients']);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\">\\n  <h2 class=\\\"text-center text-primary\\\">Sign Up</h2>\\n  <hr>\\n\\n  <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('username').errors && registerForm.get('username').touched}\\\">\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\" formControlName=\\\"username\\\">\\n    <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('username').hasError('required') && registerForm.get('username').touched\\\">\\n      Username is required\\n    </span>\\n  </div>\\n\\n  <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('password').errors && registerForm.get('password').touched}\\\">\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\n    <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('password').hasError('required') && registerForm.get('password').touched\\\">\\n      Password is required\\n    </span>\\n    <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('password').hasError('minlength') && registerForm.get('password').touched\\\">\\n      Password must be at least 4 characters\\n    </span>\\n    <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('password').hasError('maxlength') && registerForm.get('password').touched\\\">\\n      Password cannot exceed 8 characters\\n    </span>\\n  </div>\\n  <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error': registerForm.get('confirmPassword').errors \\n    && registerForm.get('confirmPassword').touched || registerForm.get('confirmPassword').touched\\n    && registerForm.hasError('mismatch')}\\\">\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\">\\n    <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('confirmPassword').hasError('required') && registerForm.get('confirmPassword').touched\\\">\\n      Confirm Password is required\\n    </span>\\n    <span class=\\\"help-block\\\" *ngIf=\\\"registerForm.get('confirmPassword').touched && registerForm.hasError('mismatch')\\\">\\n      Confirm Password must match Password\\n    </span>\\n  </div>\\n\\n  <div class=\\\"form-group text-center\\\">\\n      <button class=\\\"btn btn-success\\\" [disabled]=\\\"!registerForm.valid\\\" type=\\\"submit\\\">Register</button>\\n      <button class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n  </div>\\n</form>\\n\\n<p>Form value: {{ registerForm.value | json }}</p>\\n<p>Form status: {{ registerForm.status | json }}</p>\\n\"","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { AlertifyService } from '../_services/alertify.service';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { User } from '../_models/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\n\nexport class RegisterComponent implements OnInit {\n  @Output() cancelRegister = new EventEmitter();\n  user: User;\n  registerForm: FormGroup;\n\n  constructor(\n    private authService: AuthService,\n    private alertify: AlertifyService,\n    private fb: FormBuilder,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.createRegisterForm();\n  }\n\n  createRegisterForm() {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: [\n        '',\n        [Validators.required, Validators.minLength(4), Validators.maxLength(8)]\n      ],\n      confirmPassword: ['', Validators.required]\n    }, {validator: this.passwordMatchValidator});\n  }\n\n  passwordMatchValidator(g: FormGroup) {\n    return g.get('password').value === g.get('confirmPassword').value ? null : {'mismatch' : true};\n  }\n\n  register() {\n    if (this.registerForm.valid) {\n      this.user = Object.assign({}, this.registerForm.value);\n      this.authService.register(this.user).subscribe(() => {\n        this.alertify.success('Registration successful');\n        this.cancel();\n      }, error => {\n        this.alertify.error(error);\n      }, () => {\n        this.authService.login(this.user).subscribe(() => {\n          this.router.navigate(['/home-spa']);\n        });\n       });\n      }\n    }\n\n    cancel() {\n      this.cancelRegister.emit(false);\n    }\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { HomeSpaComponent } from '../home-spa/home-spa.component';\nimport { NavComponent } from '../nav/nav.component';\nimport { AuthGuard } from '../_guards/auth.guard';\nimport { ClientHomeComponent } from '../clients/client-home/client-home.component';\nimport { PasserComponent } from '../passer/passer.component';\nimport { ClientAddComponent } from '../clients/client-add/client-add.component';\n\nexport const appRoutes: Routes = [\n  { path: 'home-spa', component: HomeSpaComponent},  \n  { path: 'clients', component: ClientHomeComponent},  \n  { path: 'clients/:id', component: ClientHomeComponent },           \n  { path: 'passer', component: PasserComponent},          \n  // {\n  //    path: '',\n  //    runGuardsAndResolvers: 'always',\n  //    canActivate: [AuthGuard],\n  //    children: [\n  //       //  { path: 'members/:id', component: MemberDetailComponent, resolve: {user: MemberDetailResolver}},\n  //       //  { path: 'member/edit', component: MemberEditComponent,\n  //       //    resolve: {user: MemberEditResolver}, canDeactivate: [PreventUnsavedChanges]},\n  //       //  { path: 'messages', component: MessagesComponent},\n  //       //  { path: 'lists', component: ListsComponent},        \n  //    ]\n  // },\n   { path: 'nav', component: NavComponent },\n   { path: '**', redirectTo: 'home-spa', pathMatch: 'full' }\n ];\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}